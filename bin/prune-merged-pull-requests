#!/usr/bin/env bash
TOKEN=$(security find-generic-password -a $USER -s GithubGraphQLToken -w)

if [ $? == 44 ] ; then
  echo "No GitHub token found in MacOS keychain.  Please generate one at https://github.com/settings/tokens and then enter it here"
  read -s TOKEN
  security add-generic-password -a GithubGraphQLToken -w $TOKEN
fi

# Renders a text based list of options that can be selected by the
# user using up, down and enter keys and returns the chosen option.
#
#   Arguments   : list of options, maximum of 256
#                 "opt1" "opt2" ...
#   Return value: selected index (0 for opt1, 1 for opt2 ...)
function select_option {

    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "   $1 "; }
    print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    return $selected
}

function queryGraphQL() {
  QUERY=$1;
  QUOTED_AND_STRIPPED_OF_NEWLINES=$(echo $QUERY | sed -e 's/"/\\"/g');
  POSTDATA="{ \"query\": \"$QUOTED_AND_STRIPPED_OF_NEWLINES\" }";
  curl -X POST https://api.github.com/graphql --header "Authorization: bearer ${TOKEN}" --data-binary "$POSTDATA" 2>/dev/null
}

function info {
  printf "%30s: %s\n" "$1" "$2"
}

function fail {
  printf '%s\n' "$1" >&2
  exit "${2-1}"
}

function failIfPipeFail() {
  EXITCODE=${PIPESTATUS[0]};
  [[ $EXITCODE -eq 0 ]] || fail "$1" "$2"
}

CURRENT_USER_QUERY="query { viewer { login } }"

function prep_BRANCHES_QUERY {
  local OWNER
  local NAME
  OWNER="$1"
  NAME="$2"
  export BRANCHES_QUERY=$(cat <<EOF
{
  repository(owner:"$OWNER" name:"$NAME") {
    nameWithOwner
    refs(refPrefix: "refs/heads/", first: 100) {
      edges {
        node {
          name
          associatedPullRequests(last:100, states:MERGED) {
            nodes {
              number
              url
              state
            }
          }
        }
      }
    }
  }
}
EOF
  );
}

echo "Locating username and remote information...";
echo;

REMOTES=($(set -o pipefail; git remote -v | sed -e "s/\([^[:blank:]]*\).*[/@]github.com[:/]\([^/]*\/[^/]*\).git.*/\1:\2/" | grep -v "\t" | uniq ));

if [[ ${#REMOTES[@]} -lt 1 ]] ; then
  git remote prune origin && git branch -vv | grep '\[[^]]* gone]' | awk '{ print $1 }' | xargs git branch -D
  fail "Unable to find a github.com remote to prune remote branches" 12
elif [[ ${#REMOTES[@]} -eq 1 ]] ; then
  CHOICE="${REMOTES[0]}"
else
  echo "Select a remote"
  echo
  select_option "${REMOTES[@]}";
  CHOICE=${REMOTES[$?]}
fi

REMOTE=$(set -o pipefail; echo "$CHOICE" | sed -e 's/:.*//');
USER=$(set -o pipefail; echo "$CHOICE" | sed -e 's/.*://' -e 's/\/.*//');
REPO=$(set -o pipefail; echo "$CHOICE" | sed -e 's/.*://' -e 's/.*\///');

info "remote" "$REMOTE"
info "owner" "$USER"
info "repo" "$REPO"

echo;
echo "Checking up to 100 branches in $USER/$REPO for deletion...";

prep_BRANCHES_QUERY $USER $REPO

CLOSED_PULLS_WITH_URLS=$(set -o pipefail; queryGraphQL "$BRANCHES_QUERY" | jq -r ".data.repository.refs.edges[].node | select((.associatedPullRequests.nodes | length) > 0 and .name != \"master\") | .name + \":\" + .associatedPullRequests.nodes[].url")
failIfPipeFail "Unable to query GithHub via GraphQL for branches that were merged as pull requests" 13

CLOSED_PULLS=$(echo "$CLOSED_PULLS_WITH_URLS" | sed -e 's/:.*$//');

if [[ -z $CLOSED_PULLS ]] ; then
  echo "Found no branches in $USER/$REPO that were merged as pull requests";
else
  echo "Branches to clean up:"
  echo;
  echo "$CLOSED_PULLS_WITH_URLS" | sed -e 's/:/ /'
  echo;
  echo git push "${REMOTE}" --delete $CLOSED_PULLS
  git push ${REMOTE} --delete $CLOSED_PULLS

fi

echo;
echo "Cleaning up any local branches that are tracking a remote branch that has been deleted";
echo;

git remote prune origin && git branch -vv | grep '\[[^]]* gone]' | awk '{ print $1 }' | xargs git branch -D
